#!/usr/bin/env perl
my $quote = $^O eq 'MSWin32' ? q/"/ : q/'/;

my $app = App::cpanminus::script->new;
$app->parse_options(@ARGV);
$app->doit;

package App::cpanminus::script;
use strict;
use Config;
use Cwd;
use File::Basename;
use File::Spec;
use Getopt::Long;

use constant WIN32 => $^O eq 'MSWin32';

our $VERSION;BEGIN{
$VERSION = "0.09";
}

sub new {
    my $class = shift;

    bless {
        home => File::Spec->catfile($ENV{HOME}, ".cpanm"),
        seen => {},
        notest => undef,
        installdeps => undef,
        force => undef,
        sudo => undef,
        make  => undef,
        verbose => undef,
        log => undef,
        mirrors => [],
        argv => [],
        hooks => {},
    }, $class;
}

sub parse_options {
    my $self = shift;
    local @ARGV = @_;

    Getopt::Long::Configure("bundling");
    GetOptions(
        'f|force'  => \$self->{force},
        'n|notest' => \$self->{notest},
        'S|sudo'   => \$self->{sudo},
        'h|help'   => sub { $self->{cmd} = 'help' },
        'i|install' => sub {},
        'installdeps' => \$self->{installdeps},
        'V|version' => sub { $self->{cmd} = 'version' },
        'v|verbose' => \$self->{verbose},
        'look'      => sub { $self->{action} = 'look' },
        'recent'    => sub { $self->{cmd} = 'show_recent' },
        'q|quiet'   => sub {},
        'disable-plugins' => \$self->{disable_plugins},
    );

    $ENV{PERL_MM_USE_DEFAULT} = 1 unless $self->{verbose};

    $self->{argv} = \@ARGV;
}

sub doit {
    my $self = shift;

    $self->setup_home;
    $self->load_plugins;
    $self->sanity_check;

    $self->{make} = Util::which($Config{make});

    Util::init_tools();

    if (my $cmd = $self->{cmd}) {
        $self->$cmd();
        return;
    }

    $self->help(1) unless @{$self->{argv}};

    $self->configure_mirrors;

    for my $module (@{$self->{argv}}) {
        $self->install_module($module);
    }
}

sub setup_home {
    my $self = shift;

    $self->{home} = $ENV{CPANMINUS_HOME} if $ENV{CPANMINUS_HOME};
    mkdir $self->{home}, 0777 unless -e $self->{home};

    my $plugins = File::Spec->catfile($self->{home}, "plugins");
    mkdir $plugins, 0777 unless -e $plugins;

    $self->{base} = File::Spec->catfile($self->{home}, "build-" . time . ".$$");
    mkdir $self->{base}, 0777 or die "$self->{base}: $!";

    $self->{log} = File::Spec->catfile($self->{home}, "build.log");
    open my $out, ">$self->{log}" or die "$self->{log}: $!";
    print $out "Beginning a new cpanminus installation: build direcotry is $self->{base}\n";

   $self->{plugin_dir} = File::Spec->catfile($self->{home}, "plugins");
}

sub register_core_hooks {
    my $self = shift;
    
    $self->hook('core_search_cpan', search_module => sub {
        my $args = shift;
        push @{$args->{uris}}, sub {
            $self->chat("Searching $args->{module} on search.cpan.org...\n");
            my $html = Util::get("http://search.cpan.org/perldoc?$args->{module}");
            $html =~ m!Download:.*<a href="/CPAN/authors/id/(.*?)">.*?</a>!
                and return $self->cpan_uri($1);
            $self->diag("! Finding $args->{module} on search.cpan.org failed.\n");
            return;
        };
    });

    $self->hook('core_show_recent', show_recent => sub {
        my $args = shift;

        $self->chat("Fetching recent feed from search.cpan.org...\n");
        my $feed = Util::get("http://search.cpan.org/uploads.rdf");

        my @dists;
        while ($feed =~ m!<link>http://search\.cpan\.org/~([a-z_\-0-9]+)/(.*?)/</link>!g) {
            my($pause_id, $dist) = (uc $1, $2);
            push @dists, substr($pause_id, 0, 1) . "/" . substr($pause_id, 0, 2) . "/" . $pause_id . "/$dist.tar.gz";
        }

        return \@dists;
    });
}

sub load_plugins {
    my $self = shift;

    $self->_load_plugins;
    $self->register_core_hooks;

    for my $hook (keys %{$self->{hooks}}) {
        $self->{hooks}->{$hook} = [ sort { $a->[0] <=> $b->[0] } @{$self->{hooks}->{$hook}} ];
    }

    $self->run_hook(init => {});
}

sub _load_plugins {
    my $self = shift;

    return if $self->{disable_plugins};
    return unless $self->{plugin_dir} && -e $self->{plugin_dir};

    opendir my $dh, $self->{plugin_dir} or return;
    my @plugins;
    while (my $e = readdir $dh) {
        my $f = File::Spec->catfile($self->{plugin_dir}, $e);
        next unless -f $f && $e =~ /^[A-Za-z0-9_]+$/ && $e ne 'README';
        push @plugins, [ $f, $e ];
    }

    for my $plugin (sort { $a->[1] <=> $b->[1] } @plugins) {
        $self->load_plugin(@$plugin);
    }
}

sub load_plugin {
    my($self, $file, $name) = @_;

    $self->chat("Loading plugin $file\n");

    (my $package = $file) =~ s/[^a-zA-Z0-9_]/_/g;
    my $code = do { open my $io, "<$file"; local $/; <$io> };
    eval "package App::cpanplus::plugin::$package;\n".
        "use strict;\n" .
        "sub hook { \$self->hook('$name', \@_) };\n$code";

    $self->diag("! Loading plugin $file faield: $@") if $@;
}

sub hook {
    my $cb = pop;
    my($self, $name, $hook, $order) = @_;
    $order = 50 unless defined $order;
    push @{$self->{hooks}->{$hook}}, [ $order, $cb, $name ];
}

sub run_hook {
    my($self, $hook, $args) = @_;
    $self->run_hooks($hook, $args, 1);
}

sub run_hooks {
    my($self, $hook, $args, $first) = @_;

    my $res;
    for my $plugin (@{$self->{hooks}->{$hook} || []}) {
        $self->chat("Running '$hook' for $plugin->[2]\n");
        $res = eval { $plugin->[1]->({ %$args, app => $self }) };
        $self->chat("Running hook '$plugin->[2]' error: $@") if $@;
        last if $res && $first;
    }

    return $res;
}

sub version {
    print "cpanm (App::cpanminus) version $VERSION\n";
    exit 0;
}

sub help {
    my $self = shift;
    print <<USAGE;
Usage: cpanm [--verbose] [--force] [--notest] [--sudo] Module

  -v,--verbose       Turns on chatty output (required when you install Task:: modules)
  -f,--force         force install
  -n,--notest        Do not run unit tests
  -S,--sudo          sudo to run install commands
  --look             Download the tarball and open the directory with your shell
  --installdeps      Only install dependencies
  --recent           Show recently updated modules
  --disable-plugins  Disable plugin loading

Examples:

  # install CGI
  cpanm CGI

  # force install MojoMojo and its deps
  cpanm -f MojoMojo

  # specify the version
  cpanm MIYAGAWA/Plack-0.99_05.tar.gz

  # install from an URL
  cpanm http://backpan.perl.org/authors/id/L/LD/LDS/CGI.pm-3.20.tar.gz

  # install Task:: modlues (You need -v to answer questions)
  cpanm -v Task::Kensho

  # install from local directory, just like `cpan .`
  cpanm .

  # install from a local file
  cpanm ~/dists/MyCompany-Enterprise-1.00.tar.gz

USAGE

    exit $_[0];
}

sub sanity_check {
    my $self = shift;
    unless ($ENV{PERL_MM_OPT} or $ENV{MODULEBUILDRC} or -w $Config{installsitelib} or $self->{sudo}) {
        die "Can't write to $Config{installsitelib}: Run me as root or with --sudo option.\n";
    }
}

sub diag {
    my $self = shift;
    print STDERR @_;
    $self->log(@_);
}

sub chat {
    my $self = shift;
    print STDERR @_ if $self->{verbose};
    $self->log(@_);
}

sub log {
    my $self = shift;
    open my $out, ">>$self->{log}";
    print $out @_;
}

sub run {
    my($self, $cmd) = @_;

    unless ($self->{verbose}) {
        $cmd .= ">> $quote$self->{log}$quote 2>&1";
    }

    !system $cmd;
}

sub test {
    my($self, $cmd) = @_;
    return 1 if $self->{notest};
    return $self->run($cmd) || $self->{force};
}

sub install {
    my($self, $cmd) = @_;
    $cmd = "sudo $cmd" if $self->{sudo};
    $self->run($cmd);
}

sub chdir {
    my $self = shift;
    chdir(File::Spec->canonpath($_[0])) or die "$_[0]: $!";
}

sub configure_mirrors {
    my $self = shift;

    my @mirrors;
    $self->run_hook(configure_mirrors => { mirrors => \@mirrors });

    @mirrors = ('http://search.cpan.org/CPAN') unless @mirrors;
    $self->{mirrors} = \@mirrors;
}

sub show_recent {
    my $self = shift;

    my $dists = $self->run_hook(show_recent => {});
    for my $dist (@$dists) {
        print $dist, "\n";
    }
}

sub install_module {
    my($self, $module, $is_dep) = @_;

    if ($self->{seen}{$module}++) {
        $self->diag("Already tried $module. Skipping.\n");
        return;
    }

    my $dir = $self->fetch_module($module);

    unless ($dir) {
        $self->diag("! Couldn't find module or a distribution $module\n");
        return;
    }

    if ($self->{seen}{$dir}++) {
        $self->diag("Already built the distribution $dir. Skipping.\n");
        return;
    }

    $self->chat("Entering $dir...\n");
    $self->chdir($self->{base});
    $self->chdir($dir);

    if ($self->{action} eq 'look') {
        $self->diag("Entering $dir with $ENV{SHELL}\n");
        system $ENV{SHELL};
    } else {
        $self->build_stuff($module, $dir, $is_dep)
    }
}

sub generator_cb {
    my($self, $ref) = @_;

    $ref = [ $ref ] unless ref $ref eq 'ARRAY';

    my @stack;
    return sub {
        if (@stack) {
            return shift @stack;
        }

        return -1 unless @$ref;
        my $curr = (shift @$ref)->();
        if (ref $curr eq 'ARRAY') {
            @stack = @$curr;
            return shift @stack;
        } else {
            return $curr;
        }
    };
}

sub fetch_module {
    my($self, $module) = @_;

    my($uris, $local_dir) = $self->locate_dist($module);

    return $local_dir if $local_dir;
    return unless $uris;

    my $iter = $self->generator_cb($uris);

    while (1) {
        my $uri = $iter->();
        last if $uri == -1;
        next unless $uri;

        if ($uri =~ m{/perl-5}){
            $self->diag("skip $uri\n");
            next;
        }

        $self->chdir($self->{base});
        $self->diag("Fetching $uri\n");

        my $name = File::Basename::basename $uri;

        my $cancelled;
        my $fetch = sub {
            eval {
                local $SIG{INT} = sub { $cancelled = 1; die "SIGINT\n" };
                Util::mirror($uri, $name);
                return $name if -e $name;
                return;
            };
        };

        my($try, $file);
        while ($try++ < 3) {
            $file = $fetch->();
            last if $cancelled or $file;
            $self->diag("Download $uri failed. Retrying ...\n");
        }

        if ($cancelled) {
            $self->diag("! Download cancelled.\n");
            return;
        }

        unless ($file) {
            $self->diag("! Failed to download $uri\n");
            next;
        }

        $self->chat("Unpacking $file...\n");

        my $dir = Util::untar($file);
        unless ($dir) {
            $self->diag("! Failed to unpack $name: no directory\n");
            next;
        }

        return $dir;
    }
}

sub locate_dist {
    my($self, $module) = @_;

    # URL
    return sub { $module } if $module =~ /^(ftp|https?|file):/;

    # Directory
    return undef, Cwd::abs_path($module) if -e $module && -d _;

    # File
    return sub { "file://" . Cwd::abs_path($module) } if -f $module;

    # PAUSEID/foo
    $module =~ s!^([A-Z]{3,})/!substr($1, 0, 1)."/".substr($1, 0, 2) ."/" . $1 . "/"!e;

    # CPAN tarball
    return sub { $self->cpan_uri($module) } if $module =~ m!/!;

    # Module name -- search.cpan.org
    return $self->search_module($module);
}

sub cpan_uri {
    my($self, $dist) = @_;

    my @mirrors = @{$self->{mirrors}};
    my @urls    = map "$_/authors/id/$dist", @mirrors;

    return wantarray ? @urls : $urls[int(rand($#urls))];
}

sub search_module {
    my($self, $module) = @_;

    my @cbs;
    $self->run_hooks(search_module => { module => $module, uris => \@cbs });

    return \@cbs;
}

sub install_deps {
    my($self, $dir, %deps) = @_;

    my @install;
    while (my($mod, $ver) = each %deps) {
        next if $mod eq 'perl' or $mod eq 'Config';
        $self->chat("Checking if you have $mod $ver... ");
        $ver = '' if $ver == 0;
        my $test = `$^X -e ${quote}eval q{use $mod $ver (); print q{OK:}, q/$mod/->VERSION};print \$\@ if \$\@${quote}`;
        if ($test =~ s/^\s*OK://) {
            $self->chat("Yes ($test)\n");
        } elsif ($test =~ /^Can't locate|required--this is only version (\S+)/) {
            $self->chat("No ", ($1 ? "($1 < $ver)\n" : "\n"));
            push @install, $mod;
        } else {
            $self->chat("Unknown ($test)\n");
        }
    }

    if (@install) {
        $self->diag("==> Found dependencies: ", join(", ", @install), "\n");
    }

    for my $mod (@install) {
        $self->install_module($mod, 1);
    }

    $self->chdir($self->{base});
    $self->chdir($dir);
}

sub build_stuff {
    my($self, $module, $dir, $is_dep) = @_;

    if (-e 'META.yml') {
        $self->chat("Checking configure dependencies from META.yml...\n");
        my $meta = Util::parse_meta('META.yml');
        my %deps = %{$meta->{configure_requires} || {}};

        $self->install_deps($dir, %deps);
    }

    # trick AutoInstall
    $ENV{PERL5_CPAN_IS_RUNNING} = 1;

    my($use_module_build, $configured);
    if (-e 'Makefile.PL') {
        $ENV{X_MYMETA} = 'YAML';
        $self->run("$^X Makefile.PL");
        $configured = 1;
    }

    if ((!$self->{make} or !$configured) and -e 'Build.PL') {
        $self->run("$^X Build.PL");
        $use_module_build = 1;
        $configured = 1;
    }

    my %deps;
    my $meta = {};
    my($metayml) = grep -e $_, qw( MYMETA.yml META.yml );
    if ($metayml) {
        $self->chat("Checking dependencies from $metayml...\n");
        $meta = Util::parse_meta($metayml);
        %deps = (%{$meta->{requires} || {}});
        unless ($self->{notest}) {
            %deps = (%deps, %{$meta->{build_requires} || {}}, %{$meta->{test_requires} || {}});
        }
    }

    if (-e 'Makefile') {
        $self->chat("Finding PREREQ from Makefile...\n");
        open my $mf, "Makefile";
        while (<$mf>) {
            if (/^\#\s+PREREQ_PM => ({.*?})/) {
                no strict; # WTF bareword keys
                my $prereq = eval "+$1";
                %deps = (%deps, %$prereq) if $prereq;
                last;
            }
        }
    }

    $self->run_hooks(find_deps => { deps => \%deps, meta => $meta });

    $self->install_deps($dir, %deps);

    if ($self->{installdeps} && !$is_dep) {
        $self->diag("<== Installed dependencies for $module. Finishing.\n");
        return 1;
    }

    unless ($configured) {
        $self->diag("! Oops, you don't have make or the dist didn't have Makefile.PL.\n");
        $self->diag("! Trying to build a stub Build file for you. Hope this works!\n");
        {
            open my $mb, ">Build.PL";
            print $mb "require Module::Build;Module::Build->new(module_name => '$module',";
            print $mb "dist_name => '$meta->{name}', dist_version => '$meta->{version}'" if $meta;
            print $mb ")->create_build_script;";
        }

        $self->run("$^X Build.PL");
        $use_module_build = 1;
    }

    $self->diag("Building ", ($self->{notest} ? "" : "and testing "), "$dir for $module...\n");

    my $installed;
    if ($use_module_build && -e 'Build' && -f _) {
        $self->run("$^X ./Build") &&
        $self->test("$^X ./Build test") &&
        $self->install("$^X ./Build install") &&
        $installed++;
    } elsif ($self->{make} && -e 'Makefile') {
        $self->run("$self->{make}") &&
        $self->test("$self->{make} test") &&
        $self->install("$self->{make} install") &&
        $installed++;
    } else {
        $self->diag("! Sorry, I don't know how to build $dir\n");
        return;
    }

    if ($installed) {
        $self->diag("$module installed successfully.\n");
        $self->run_hooks(install_success => { module => $module, build_dir => $dir, meta => $meta });
        return 1;
    } else {
        $self->diag("! Installing $module failed. See $self->{log} for details.\n");
        return;
    }
}

package Util;

use Config;
sub get($);
sub mirror($$);
sub untar;

sub quote {
    my $stuff = shift;
    $quote . $stuff . $quote;
}

sub which {
    my($name) = @_;
    my $exe_ext = $Config{_exe};
    foreach my $dir (File::Spec->path){
        my $fullpath = File::Spec->catfile($dir, $name);
        if (-x $fullpath || -x ($fullpath .= $exe_ext)){
            if ($fullpath =~ /\s/ && $fullpath !~ /^$quote/) {
                $fullpath = Util::quote($fullpath);
            }
            return $fullpath;
        }
    }
    return;
}

sub file_mirror {
    my($uri, $path) = @_;
    require File::Copy;
    File::Copy::copy($uri, $path);
}

sub init_tools {
    if (eval { require LWP::Simple }) {
        *get = \&LWP::Simple::get;
        *mirror = \&LWP::Simple::mirror;
    } elsif (my $wget = which 'wget') {
        *get = sub ($) {
            my $uri = shift;
            my $q = $app->{verbose} ? '' : '-q';
            open my $fh, "$wget $uri $q -O - |" or die "wget $uri: $!";
            local $/;
            <$fh>;
        };
        *mirror = sub ($$) {
            my($uri, $path) = @_;
            return file_mirror($uri, $path) if $uri =~ s!^file:/+!/!;
            my $q = $app->{verbose} ? '' : '-q';
            system "$wget $uri $q -O $path";
        };
    }
    # TODO curl

    if (my $tar = which 'tar'){
        *untar = sub {
            my($tarfile) = @_;

            my $xf = "xf" . ($app->{verbose} ? 'v' : '');
            my $ar = $tarfile =~ /bz2$/ ? 'j' : 'z';

            my($root, @others) = `$tar tf$ar $tarfile`
                or return undef;

            chomp $root;
            $root =~ s{^(.+)/[^/]*$}{$1};

            system "$tar $xf$ar $tarfile";
            return $root if -d $root;

            $app->diag("Bad archive: $tarfile\n");
            return undef;
        }
    } elsif (eval { require Archive::Tar }) { # uses too much memory!
        *untar = sub {
            my $t = Archive::Tar->new($_[0]);
            my $root = ($t->list_files)[0];
            $t->extract;
            return -d $root ? $root : undef;
        };
    }
}

sub parse_meta {
    my $file = shift;
    return eval { (Parse::CPAN::Meta::LoadFile($file))[0] } || {};
}

### Inline stripped Parse::CPAN::Meta
# Copyright: Adam Kennedy
package Parse::CPAN::Meta;
use Carp 'croak';
# Printable characters for escapes
my %UNESCAPES = (
	z => "\x00", a => "\x07", t    => "\x09",
	n => "\x0a", v => "\x0b", f    => "\x0c",
	r => "\x0d", e => "\x1b", '\\' => '\\',
);
# Create an object from a file
sub LoadFile ($) {
	# Check the file
	my $file = shift;
	croak('You did not specify a file name')            unless $file;
	croak( "File '$file' does not exist" )              unless -e $file;
	croak( "'$file' is a directory, not a file" )       unless -f _;
	croak( "Insufficient permissions to read '$file'" ) unless -r _;

	# Slurp in the file
	local $/ = undef;
	local *CFG;
	unless ( open( CFG, $file ) ) {
		croak("Failed to open file '$file': $!");
	}
	my $yaml = <CFG>;
	unless ( close(CFG) ) {
		croak("Failed to close file '$file': $!");
	}

	# Hand off to the actual parser
	Load( $yaml );
}

# Parse a document from a string.
# Doing checks on $_[0] prevents us having to do a string copy.
sub Load ($) {
	my $string = $_[0];
	unless ( defined $string ) {
		croak("Did not provide a string to load");
	}

	# Byte order marks
	if ( $string =~ /^(?:\376\377|\377\376|\377\376\0\0|\0\0\376\377)/ ) {
		croak("Stream has a non UTF-8 Unicode Byte Order Mark");
	} else {
		# Strip UTF-8 bom if found, we'll just ignore it
		$string =~ s/^\357\273\277//;
	}

	# Check for some special cases
	return () unless length $string;
	unless ( $string =~ /[\012\015]+\z/ ) {
		croak("Stream does not end with newline character");
	}

	# Split the file into lines
	my @lines = grep { ! /^\s*(?:\#.*)?\z/ }
	            split /(?:\015{1,2}\012|\015|\012)/, $string;

	# Strip the initial YAML header
	@lines and $lines[0] =~ /^\%YAML[: ][\d\.]+.*\z/ and shift @lines;

	# A nibbling parser
	my @documents = ();
	while ( @lines ) {
		# Do we have a document header?
		if ( $lines[0] =~ /^---\s*(?:(.+)\s*)?\z/ ) {
			# Handle scalar documents
			shift @lines;
			if ( defined $1 and $1 !~ /^(?:\#.+|\%YAML[: ][\d\.]+)\z/ ) {
				push @documents, _scalar( "$1", [ undef ], \@lines );
				next;
			}
		}

		if ( ! @lines or $lines[0] =~ /^(?:---|\.\.\.)/ ) {
			# A naked document
			push @documents, undef;
			while ( @lines and $lines[0] !~ /^---/ ) {
				shift @lines;
			}

		} elsif ( $lines[0] =~ /^\s*\-/ ) {
			# An array at the root
			my $document = [ ];
			push @documents, $document;
			_array( $document, [ 0 ], \@lines );

		} elsif ( $lines[0] =~ /^(\s*)\S/ ) {
			# A hash at the root
			my $document = { };
			push @documents, $document;
			_hash( $document, [ length($1) ], \@lines );

		} else {
			croak("Parse::CPAN::Meta failed to classify line '$lines[0]'");
		}
	}

	if ( wantarray ) {
		return @documents;
	} else {
		return $documents[-1];
	}
}

# Deparse a scalar string to the actual scalar
sub _scalar ($$$) {
	my ($string, $indent, $lines) = @_;

	# Trim trailing whitespace
	$string =~ s/\s*\z//;

	# Explitic null/undef
	return undef if $string eq '~';

	# Quotes
	if ( $string =~ /^\'(.*?)\'\z/ ) {
		return '' unless defined $1;
		$string = $1;
		$string =~ s/\'\'/\'/g;
		return $string;
	}
	if ( $string =~ /^\"((?:\\.|[^\"])*)\"\z/ ) {
		# Reusing the variable is a little ugly,
		# but avoids a new variable and a string copy.
		$string = $1;
		$string =~ s/\\"/"/g;
		$string =~ s/\\([never\\fartz]|x([0-9a-fA-F]{2}))/(length($1)>1)?pack("H2",$2):$UNESCAPES{$1}/gex;
		return $string;
	}

	# Special cases
	if ( $string =~ /^[\'\"!&]/ ) {
		croak("Parse::CPAN::Meta does not support a feature in line '$lines->[0]'");
	}
	return {} if $string eq '{}';
	return [] if $string eq '[]';

	# Regular unquoted string
	return $string unless $string =~ /^[>|]/;

	# Error
	croak("Parse::CPAN::Meta failed to find multi-line scalar content") unless @$lines;

	# Check the indent depth
	$lines->[0]   =~ /^(\s*)/;
	$indent->[-1] = length("$1");
	if ( defined $indent->[-2] and $indent->[-1] <= $indent->[-2] ) {
		croak("Parse::CPAN::Meta found bad indenting in line '$lines->[0]'");
	}

	# Pull the lines
	my @multiline = ();
	while ( @$lines ) {
		$lines->[0] =~ /^(\s*)/;
		last unless length($1) >= $indent->[-1];
		push @multiline, substr(shift(@$lines), length($1));
	}

	my $j = (substr($string, 0, 1) eq '>') ? ' ' : "\n";
	my $t = (substr($string, 1, 1) eq '-') ? ''  : "\n";
	return join( $j, @multiline ) . $t;
}

# Parse an array
sub _array ($$$) {
	my ($array, $indent, $lines) = @_;

	while ( @$lines ) {
		# Check for a new document
		if ( $lines->[0] =~ /^(?:---|\.\.\.)/ ) {
			while ( @$lines and $lines->[0] !~ /^---/ ) {
				shift @$lines;
			}
			return 1;
		}

		# Check the indent level
		$lines->[0] =~ /^(\s*)/;
		if ( length($1) < $indent->[-1] ) {
			return 1;
		} elsif ( length($1) > $indent->[-1] ) {
			croak("Parse::CPAN::Meta found bad indenting in line '$lines->[0]'");
		}

		if ( $lines->[0] =~ /^(\s*\-\s+)[^\'\"]\S*\s*:(?:\s+|$)/ ) {
			# Inline nested hash
			my $indent2 = length("$1");
			$lines->[0] =~ s/-/ /;
			push @$array, { };
			_hash( $array->[-1], [ @$indent, $indent2 ], $lines );

		} elsif ( $lines->[0] =~ /^\s*\-(\s*)(.+?)\s*\z/ ) {
			# Array entry with a value
			shift @$lines;
			push @$array, _scalar( "$2", [ @$indent, undef ], $lines );

		} elsif ( $lines->[0] =~ /^\s*\-\s*\z/ ) {
			shift @$lines;
			unless ( @$lines ) {
				push @$array, undef;
				return 1;
			}
			if ( $lines->[0] =~ /^(\s*)\-/ ) {
				my $indent2 = length("$1");
				if ( $indent->[-1] == $indent2 ) {
					# Null array entry
					push @$array, undef;
				} else {
					# Naked indenter
					push @$array, [ ];
					_array( $array->[-1], [ @$indent, $indent2 ], $lines );
				}

			} elsif ( $lines->[0] =~ /^(\s*)\S/ ) {
				push @$array, { };
				_hash( $array->[-1], [ @$indent, length("$1") ], $lines );

			} else {
				croak("Parse::CPAN::Meta failed to classify line '$lines->[0]'");
			}

		} elsif ( defined $indent->[-2] and $indent->[-1] == $indent->[-2] ) {
			# This is probably a structure like the following...
			# ---
			# foo:
			# - list
			# bar: value
			#
			# ... so lets return and let the hash parser handle it
			return 1;

		} else {
			croak("Parse::CPAN::Meta failed to classify line '$lines->[0]'");
		}
	}

	return 1;
}

# Parse an array
sub _hash ($$$) {
	my ($hash, $indent, $lines) = @_;

	while ( @$lines ) {
		# Check for a new document
		if ( $lines->[0] =~ /^(?:---|\.\.\.)/ ) {
			while ( @$lines and $lines->[0] !~ /^---/ ) {
				shift @$lines;
			}
			return 1;
		}

		# Check the indent level
		$lines->[0] =~ /^(\s*)/;
		if ( length($1) < $indent->[-1] ) {
			return 1;
		} elsif ( length($1) > $indent->[-1] ) {
			croak("Parse::CPAN::Meta found bad indenting in line '$lines->[0]'");
		}

		# Get the key
		unless ( $lines->[0] =~ s/^\s*([^\'\" ][^\n]*?)\s*:(\s+|$)// ) {
			if ( $lines->[0] =~ /^\s*[?\'\"]/ ) {
				croak("Parse::CPAN::Meta does not support a feature in line '$lines->[0]'");
			}
			croak("Parse::CPAN::Meta failed to classify line '$lines->[0]'");
		}
		my $key = $1;

		# Do we have a value?
		if ( length $lines->[0] ) {
			# Yes
			$hash->{$key} = _scalar( shift(@$lines), [ @$indent, undef ], $lines );
		} else {
			# An indent
			shift @$lines;
			unless ( @$lines ) {
				$hash->{$key} = undef;
				return 1;
			}
			if ( $lines->[0] =~ /^(\s*)-/ ) {
				$hash->{$key} = [];
				_array( $hash->{$key}, [ @$indent, length($1) ], $lines );
			} elsif ( $lines->[0] =~ /^(\s*)./ ) {
				my $indent2 = length("$1");
				if ( $indent->[-1] >= $indent2 ) {
					# Null hash entry
					$hash->{$key} = undef;
				} else {
					$hash->{$key} = {};
					_hash( $hash->{$key}, [ @$indent, length($1) ], $lines );
				}
			}
		}
	}

	return 1;
}

package App::cpanminus::script;

__END__

=head1 NAME

App::cpanminus - get, unpack, build and install modules from CPAN

=head1 SYNOPSIS

    cpanm Module

Run C<cpanm -h> for more options.

=head1 DESCRIPTION

cpanminus is a script to get, unpack, build and install modules from CPAN.

Its catch? Deps-free, zero-conf, standalone ~350 LOC script
(i.e. hackable) and requires 8MB of RAM. See below for its cons.

=head1 INSTALLATION

  cpan> install App::cpanminus

Or,

  cd ~/bin
  wget http://xrl.us/cpanm
  chmod +x cpanm
  # edit shebang if you don't have /usr/bin/env

=head1 DEPENDENCIES

perl 5.8 or later (Actually I believe it works with pre 5.8 too but
haven't tested).

=over 4

=item *

LWP or 'wget' to get files over HTTP.

=item *

'tar' executable (if GNU tar, version 1.22 or later) or Archive::Tar to unpack files.

=item *

C compiler, if you want to build XS modules.

=back

And optionally:

=over 4

=item *

make, if you want to more reliably install MakeMaker based modules

=item *

Module::Build (core in 5.10) if you want to install MakeMaker based modules without 'make'

=back

=head1 QUESTIONS

=head2 Should I really use this?

Probably not. You should use CPAN or CPANPLUS.

=head2 What's the point?

OK, the first motivation was this: CPAN shell gets OOM (or swaps
heavily and gets really slow) on Slicehost/linode's most affordable
plan with only 256MB RAM. Should I pay more to install perl modules
from CPAN? I don't think so.

Yes, I know there are tools like CPAN::SQLite that can fix that
problem (and yes I use it on my Macbook Pro!) but installing it and
its 14 non-core dependencies without CPAN shell (because CPAN shell
doesn't work) feels like yak shaving.

So, imagine you don't have CPAN or CPANPLUS. What you're going to do
is to search the module on the CPAN search site, download a tarball,
unpack it and then run C<perl Makefile.PL> (or C<perl Build.PL>) and
then C<make install> (or C<./Build install>). If the module has
dependencies you probably have to recurively resolve those
dependencies by hand before doing so.

This script just automates that.

=head2 Zero-conf? How does this module get/parse/update the CPAN index?

It scrapes the site L<http://search.cpan.org/>. Yes, it's horrible and
fragile. I hope (and have talked to) QA/toolchain people building a
queriable CPAN DB website so I can stop scraping.

Fetched files are unpacked in C<~/.cpanm> but you can configure with
C<CPANMINUS_HOME> environment variable.

=head2 Yet Another CPAN installer? Are you on drugs?

Yes, I think my brain has been damaged since I looked at PyPI,
gemcutter, pip and rip. They're quite nice.

=head2 Where does this install modules to?

It installs to wherever ExtUtils::MakeMaker and Module::Build are
configured to (i.e. via C<PERL_MM_OPT> and C<MODULEBUILDRC>). So if
you use local::lib then it installs to your local perl5
directory. Otherwise it installs to siteperl directory, so you might
need to run C<cpanm> command as root, or run with C<--sudo> option to
auto sudo when running the install command.

=head2 Does this really work?

I tested installing MojoMojo, Task::Kensho, KiokuDB, Catalyst, Jifty
and Plack using cpanminus and the installations including dependencies
were mostly successful. So multiplies of I<half of CPAN> behave really
nicely and appear to work.

However, there are some distributions that will miserably fail,
because of the nasty edge cases (funky archive formats, naughty
tarball that extracts to the current directory, META.yml that is
outdated and cannot be resurrected, Bundle:: modules, circular
dependencies etc.)  while CPAN and CPANPLUS can handle them.

=head2 So you're ignoring the CPAN toolchain ecosystem with this?

Not really. This tiny script actually respects and plays nice with all
the toolchain ecosystem that has been developed for years, such as:
L<Module::Build>, L<Module::Install>, L<ExtUtils::MakeMaker> and
L<local::lib>. It just provides an alternative to (but B<NOT> a
replacement for) L<CPAN> or L<CPANPLUS>, so that it doesn't require
any configuration, any dependencies and has no bootstrap problems.

The thing is, I've learned that often for less experienced users, or
even really experienced users who knows how to shoot in their feet,
setting up a CPAN toolchain I<in the right way> feels like just
another yak to shave when all they want to do is just to quickstart
writing perl code by installing CPAN modules. cpanminus is a super
tiny shaver to eliminate the big yak really quickly in that case, and
does nothing else.

=head2 That sounds fantastic. Should I switch to this from CPAN(PLUS)?

While I think you should really use CPAN or CPANPLUS in the longer
term, I'm happy if you like this software. And apparently, many people
love (at least the idea of) this software :)

=head1 COPYRIGHT

Copyright 2010- Tatsuhiko Miyagawa

L<Parse::CPAN::Meta>, included in this script, is Copyright 2006-2009 Adam Kennedy

=head1 LICENSE

Same as Perl.

=head1 CREDITS

Patches contributed by: Goro Fuji, Kazuhiro Osawa, Tokuhiro Matsuno,
Kenichi Ishigaki, Ian Wells, Pedro Melo.

Feedbacks sent by: Jesse Vincent, David Golden, Chris Williams, Matt S
Trout, Adam Kennedy, J. Shirley, Chris Prather, Jesse Luehrs.

=head1 NO WARRANTY

This software is provided "as-is," without any express or implied
warranty. In no event shall the author be held liable for any damages
arising from the use of the software.

=head1 SEE ALSO

L<CPAN> L<CPANPLUS>

=cut
