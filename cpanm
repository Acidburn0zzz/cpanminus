#!/usr/bin/perl
use strict;
use Config;
use File::Basename qw(basename);
use Fatal qw(chdir);
use Parse::CPAN::Meta;
use File::Spec;

sub get($);
sub mirror($$);
sub untar;
sub which;

if (eval { require LWP::Simple }) {
    *get = \&LWP::Simple::get;
    *mirror = \&LWP::Simple::mirror;
} elsif (my $wget = which 'wget') {
    *get = sub ($) {
        my $uri = shift;
        open my $fh, "$wget $uri -O - |" or die "wget $uri: $!";
        local $/;
            <$fh>;
    };
    *mirror = sub ($$) {
        my($uri, $path) = @_;
        `$wget $uri -O $path`;
    };
}
# TODO curl


if(my $tar = which 'tar'){
    *untar = sub {
        my($tarfile) = @_;

        my $suf = $tarfile =~ /bz2$/ ? 'j' : 'z';

        system "$tar xvf$suf $tarfile";

        my @files = `$tar tf$suf $tarfile`;
        if (@files) {
            chomp $files[0];
            return $files[0];
        } else {
            return undef;
        }
    }
} elsif (eval { require Archive::Tar }) { # uses too much memory!
    *untar = sub {
        my $t = Archive::Tar->new($_[0]);
        my $root = ($t->list_files)[0];
        $t->extract;
        return -d $root ? $root : undef;
    };
}

sub diag {
    print STDERR @_;
}

my $Base = "$ENV{HOME}/.cpanm";
mkdir $Base, 0777 unless -e $Base;

my %seen;

for my $module (@ARGV) {
    install_module($module);
}

sub run($) {
    my $cmd = shift;
    !system $cmd;
}

sub install_module {
    my $module = shift;

    if ($seen{$module}++) {
        diag "Already tried $module. Skipping\n";
        return;
    }

    my $uri = $module =~ /^(ftp|https?|file):/ ? $module : find_module($module);

    unless ($uri) {
        diag "Can't find module $module\n";
        return;
    }

    chdir $Base;
    diag "Fetching $uri ...\n";

    my $name = basename $uri;
    mirror($uri, $name);

    unless (-e $name) {
        diag "Failed to download $uri\n";
        return;
    }

    diag "Unpacking $name ...\n";
    my $dir = untar $name;
    unless ($dir) {
        diag "Failed to unpack $name: no directory\n";
        return;
    }

    diag "Entering $dir ...\n";
    chdir $dir;

    if (-e 'META.yml') {
        diag "Checking dependencies ...\n";
        my @y = Parse::CPAN::Meta::LoadFile('META.yml');
        my %deps = (%{$y[0]->{requires} || {}}, %{$y[0]->{build_requires} || {}});

        my @install;
        while (my($mod, $ver) = each %deps) {
            next if $mod eq 'perl';
            diag "Checking if you have $mod $ver ... ";
            my $test = `$Config{perlpath} -e 'use $mod $ver (); print "OK:", $mod->VERSION'`;
            if ($test =~ s/^OK://) {
                diag "Yes ($test)\n";
            } else {
                diag "No\n";
                push @install, $mod;
            }
        }

        for my $mod (@install) {
            install_module($mod);
        }

        chdir $Base;
        chdir $dir;
    }

    diag "Building $module ...\n";

    # fake AutoInstall
    $ENV{PERL5_CPAN_IS_RUNNING} = 1;

    if (-e 'Build.PL') {
        run "$Config{perlpath} Build.PL" &&
        run './Build'      &&
        run './Build test' &&
        run './Build install';
    } elsif (-e 'Makefile.PL') {
        run "$Config{perlpath} Makefile.PL" &&
        run 'make'            &&
        run 'make test'       &&
        run 'make install';
    } else {
        diag "Don't know how to build $dir\n";
        return;
    }
}

sub find_module {
    my $module = shift;
    my $html = get("http://search.cpan.org/perldoc?$module");
    $html =~ m!Download:<br/> <a href="(/CPAN/.*?)">.*?</a></p>!
        and return "http://search.cpan.org$1";

    return;
}

sub which {
    my($name) = @_;
    my $exe_ext = $Config{_exe};
    foreach my $dir(File::Spec->path){
        my $fullpath = File::Spec->catfile($dir, $name);
        if (-x $fullpath || -x ($fullpath .= $exe_ext)){
            return $fullpath;
        }
    }
    return;
}
